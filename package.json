{
  "name": "give-me-a-room",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "@types/jest": "^26.0.24",
    "@types/node": "^12.20.24",
    "@types/react": "^17.0.20",
    "@types/react-dom": "^17.0.9",
    "@types/react-router-dom": "^5.1.8",
    "@types/yup": "^0.29.13",
    "axios": "^0.21.4",
    "cross-env": "^7.0.3",
    "date-fns": "^2.23.0",
    "formik": "^2.2.9",
    "i18next": "^20.6.1",
    "i18next-browser-languagedetector": "^6.1.2",
    "node-sass": "^6.0.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-i18next": "^11.12.0",
    "react-router-dom": "^5.3.0",
    "react-scripts": "4.0.3",
    "reakit": "^1.3.9",
    "typescript": "^4.4.3",
    "web-vitals": "^1.1.2",
    "yup": "^0.32.9"
  },
  "scripts": {
    "start": "cross-env REACT_APP_ENV=local react-scripts start",
    "eslint": "eslint --config .eslintrc.json --ext .ts,.tsx ./",
    "build": "cross-env REACT_APP_ENV=local react-scripts build",
    "test": "cross-env REACT_APP_ENV=local react-scripts test --watchAll",
    "test:coverage": "cross-env REACT_APP_ENV=local react-scripts test --watchAll --coverage",
    "test:ci": "cross-env REACT_APP_ENV=test node scripts/test.js --coverage --maxWorkers=25%",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^4.31.0",
    "@typescript-eslint/parser": "^4.31.0",
    "eslint": "^7.32.0",
    "eslint-plugin-import": "^2.24.2",
    "eslint-plugin-react": "^7.25.1",
    "eslint-plugin-react-hooks": "^4.2.0"
  },
  "jest": {
    "testMatch": ["**/__tests__/**/*.test.[t]s?(x)"],
    "collectCoverageFrom": [
      "**/*.{ts,tsx}",
      "!**/node_modules/**",
      "!**/vendor/**",
      "!**/types/**",
      "!**/__tests__/**"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 5,
        "functions": 5,
        "lines": 5,
        "statements": 5
      }
    },
    "coverageReporters": ["json", "lcov", "text"]
  }
  
}
